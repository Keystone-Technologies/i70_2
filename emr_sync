#!/usr/bin/env perl

use strict;
use warnings;
use 5.014;
no strict 'refs';

use DBI;
use Mojo::JSON 'j';
use Mojo::IOLoop;
use Mojo::UserAgent;

my $db = "http://burfarationsessalindsomm:ECxBSE6eKmui8UwVqSJ42AMR\@s1037989.cloudant.com/i70";
my $ua = Mojo::UserAgent->new;
my %dbh = map { $_ => DBI->connect("dbi:mysql:emr_$_;host=kit-i70$_", 'i70', 'i70') } ('a'..'d');

&{$_}($dbh{$_}) foreach keys %dbh;

#Mojo::IOLoop->start unless Mojo::IOLoop->is_running;

sub a { sync(a => shift->prepare("SELECT height,nationality,md5(concat(patients.ssn, dob)) as deid FROM patients LEFT JOIN vitals USING (ssn)")) }
sub b { sync(b => shift->prepare("SELECT weight,nationality,md5(concat(patients.ssn, dob)) as deid FROM patients LEFT JOIN vitals USING (ssn)")) }
sub c { sync(c => shift->prepare("SELECT height,ethnicity,md5(concat(patients.ssn, dob)) as deid FROM patients LEFT JOIN vitals USING (ssn)")) }
sub d { sync(d => shift->prepare("SELECT weight,ethnicity,md5(concat(patients.ssn, dob)) as deid FROM patients LEFT JOIN vitals USING (ssn)")) }

sub sync {
  my ($dbh, $sth) = @_;
  $sth->execute;
  while ( my $row = $sth->fetchrow_hashref ) {
    delete $row->{$_} foreach grep { exists $row->{$_} } qw/id rev/;
    my $tx = $ua->get("$db/$row->{deid}");
    my $res = $tx->res->json;
    if ( $res->{error} ) {
      if ( $res->{error} eq 'not_found' ) {
        say "Creating $dbh/$row->{deid}...";
        my $tx = $ua->put("$db/$row->{deid}" => json => $row);
        say j($tx->res->json);
      }
    } else {
      #say "$_\t$row->{$_}\t$res->{$_}" foreach keys $row;
      if ( grep { ! exists $res->{$_} || $res->{$_} ne $row->{$_} } keys %$row ) { # This does not compare a json structure, just a string value but this should not be a problem with an RDBMS
        say "Updating $dbh/$row->{deid}/$res->{_rev}...";
        $row->{_rev} = $res->{_rev};
        my $tx = $ua->put("$db/$row->{deid}" => json => {%$res, %$row});
        say j($tx->res->json);
      } else {
        say "$row->{deid} already up to date";
      }
    }
  }
}

sub AUTOLOAD {
  my $program = $::AUTOLOAD;
  $program =~ s/.*:://;
  warn "$program handler not found\n";
}
